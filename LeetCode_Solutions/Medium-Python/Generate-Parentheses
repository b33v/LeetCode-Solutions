class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        def backtrack(output, curr_str, open_count, close_count):
            if len(curr_str) == 2 * n:
                output.append(curr_str)
                return
            
            if open_count < n:
                backtrack(output, curr_str + '(', open_count + 1, close_count)
            
            if close_count < open_count:
                backtrack(output, curr_str + ')', open_count, close_count + 1)
        
        result = []
        backtrack(result, '', 0, 0)
        return result
