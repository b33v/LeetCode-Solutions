class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        # create a matrix to store the minimum edit distance between prefixes of the two words
        m, n = len(word1), len(word2)
        dp = [[0] * (n+1) for _ in range(m+1)]
        
        # initialize the first row and column of the matrix
        for i in range(m+1):
            dp[i][0] = i
        for j in range(n+1):
            dp[0][j] = j
        
        # fill in the rest of the matrix
        for i in range(1, m+1):
            for j in range(1, n+1):
                # if the characters are the same, no operation is needed
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                # otherwise, choose the operation that results in the minimum edit distance
                else:
                    dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])
        
        # the minimum edit distance is the value in the bottom-right corner of the matrix
        return dp[m][n]
