class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        m, n = len(s), len(p)
        
        # Initialize a 2D boolean array dp to store the intermediate results
        dp = [[False] * (n+1) for _ in range(m+1)]
        
        # Empty pattern matches empty string
        dp[0][0] = True
        
        # Handle patterns that start with '*'
        for j in range(1, n+1):
            if p[j-1] == '*':
                dp[0][j] = dp[0][j-2]
        
        # Fill the remaining cells in dp using bottom-up dynamic programming
        for i in range(1, m+1):
            for j in range(1, n+1):
                if p[j-1] in {s[i-1], '.'}:
                    dp[i][j] = dp[i-1][j-1]
                elif p[j-1] == '*':
                    dp[i][j] = dp[i][j-2] or (dp[i-1][j] and p[j-2] in {s[i-1], '.'})
        
        # Return the result
        return dp[m][n]
