class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        # initialize pointers for string s and pattern p
        s_ptr = 0
        p_ptr = 0
        
        # initialize pointers for the last matching position of '*' and the character in string s
        last_star_ptr = -1
        last_s_ptr = -1
        
        # iterate through string s
        while s_ptr < len(s):
            # if the current characters in string s and pattern p match or pattern p has '?'
            if p_ptr < len(p) and (p[p_ptr] == '?' or p[p_ptr] == s[s_ptr]):
                # move pointers to the next characters in string s and pattern p
                s_ptr += 1
                p_ptr += 1
            # if pattern p has '*'
            elif p_ptr < len(p) and p[p_ptr] == '*':
                # update last matching position of '*'
                last_star_ptr = p_ptr
                # update last matching position of character in string s
                last_s_ptr = s_ptr
                # move pointer to the next character in pattern p
                p_ptr += 1
            # if the current characters in string s and pattern p do not match and there is a last matching position of '*'
            elif last_star_ptr != -1:
                # reset pointers to the last matching position of '*'
                p_ptr = last_star_ptr + 1
                s_ptr = last_s_ptr + 1
                # update last matching position of character in string s
                last_s_ptr += 1
            # if there is no last matching position of '*'
            else:
                # the match is not found
                return False
        
        # skip all '*' at the end of pattern p
        while p_ptr < len(p) and p[p_ptr] == '*':
            p_ptr += 1
        
        # if pattern p has been fully matched
        return p_ptr == len(p)
