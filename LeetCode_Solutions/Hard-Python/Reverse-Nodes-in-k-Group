# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        # Helper function to reverse a linked list from head to tail
        def reverseList(head, tail):
            prev, curr = tail.next, head
            while prev != tail:
                next = curr.next
                curr.next = prev
                prev, curr = curr, next
            return tail, head
        
        # Initialize the result and the previous tail node
        dummy = ListNode(0)
        dummy.next = head
        prev_tail = dummy
        
        # Iterate through the linked list in k-group chunks
        while head:
            tail = prev_tail
            # Check if there are at least k nodes left in the list
            for i in range(k):
                tail = tail.next
                if not tail:
                    return dummy.next
            
            # Reverse the current k-group
            next_head = tail.next
            head, tail = reverseList(head, tail)
            
            # Update the pointers in the linked list
            prev_tail.next = head
            tail.next = next_head
            prev_tail = tail
            head = tail.next
        
        return dummy.next
